{"version":3,"sources":["ConnectFour.js"],"names":[],"mappings":"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","file":"ConnectFour-compiled.js","sourcesContent":["//Connect4 Game class\n\n/**\n * Creates an object of ConnectFour game\n * @class\n * @classdesc Each object has two players and a defined number of rows and columns in a board\n */\n\nclass ConnectFour {\n    /**\n     * Create a ConnectFour object which has two players and is defined by a number of rows and columns.\n     * @constructor\n     * @property numRows\n     * @property numCols\n     */\n    constructor(numRows, numCols, firstPlayer, secondPlayer) {\n        this._rows = numRows;\n        this._cols = numCols;\n        this._board = [];\n        this._currentPlayer = firstPlayer;\n        this._firstPlayer = firstPlayer;\n        this._secondPlayer = secondPlayer;\n\n        //console.log(this._height);\n\n        // initializing the board\n        for (let counter = 0; counter < numRows; counter++) {\n            this.board[counter] = [];\n            for (let counter2 = 0; counter2 < numCols; counter2++) {\n                this.board[counter][counter2] = 0;\n            }\n        }\n        this._length = numRows * numCols;\n        this._inRowForWin = 4; // can be changed for different length\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    get rows() {\n        return this._rows;\n    }\n\n    set rows(v) {\n        this._rows = v;\n    }\n\n    get cols() {\n        return this._cols;\n    }\n\n    set cols(v) {\n        this._cols = v;\n    }\n\n    get board() {\n        return this._board;\n    }\n\n    set board(v) {\n        this._board = v;\n    }\n\n    get currentPlayer() {\n        return this._currentPlayer;\n    }\n\n    set currentPlayer(v) {\n        this._currentPlayer = v;\n    }\n\n    get firstPlayer() {\n        return this._firstPlayer;\n    }\n\n    set firstPlayer(v) {\n        this._firstPlayer = v;\n    }\n\n    get secondPlayer() {\n        return this._secondPlayer;\n    }\n\n    set secondPlayer(v) {\n        this._secondPlayer = v;\n    }\n\n    /**\n     * Toggles players based on whose turn it is\n     */\n    switchPlayer() {\n        if (this._currentPlayer === this._firstPlayer) {\n            this._currentPlayer = this._secondPlayer;\n            //console.log(\"switched to second player in core\");\n            return true;\n        } else {\n            this._currentPlayer = this._firstPlayer;\n            //console.log(\"switched to first player in core\");\n            return true;\n        }\n    }\n\n    /**\n     * Drops a disk in a column counter.e. updates array with the right number based on player. Defaults to first player\n     * @param colNumber\n     * @returns {boolean}\n     */\n    dropDisk(colNumber) {\n        var value;\n        if (this._currentPlayer === this._firstPlayer) {\n            value = 1; // assign 1 to first player\n        } else {\n            value = -1; // assign -1 to second player\n        }\n        try {\n\n            if (colNumber < this._cols) {\n                // Get the lowest empty slot's row value in a column\n                let emptySlotRow = this.getEmptySlotRow(colNumber);\n                // Check if its first or an other row, we use -1 as a flag to indicate the column is filled already\n                if (emptySlotRow >= 0) {\n                    this._board[emptySlotRow][colNumber] = value;\n\n                    // see which value is actually being saved\n                    //value == 1 ? console.log(\"first player value saved\") : console.log(\"2nd player value saved\");\n\n                    //check for winning in response to the recent disk drop\n                    //console.log(\"checking for [\" + emptySlotRow + \"][\" + colNumber + ']');\n\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n               return false;\n            }\n        }\n        catch (err) {\n            console.error(err.message);\n            return false;\n        }\n    }\n\n    /**\n     * When called with column number is a parameter, returns the top empty slot info as row number.\n     * @param colNumber\n     * @returns {*} count\n     */\n    getEmptySlotRow(colNumber) {\n        for (var counter = this._rows - 1; counter >= 0; counter--) {\n            if (this._board[counter][colNumber] === 0) {\n                break;\n            }\n        }\n        return counter;\n    }\n\n    /**\n     * Check if game is won by the current player after each move\n     * @param rowNumber\n     * @param colNumber\n     * @returns {boolean}\n     */\n    isWon(rowNumber, colNumber) {\n        var isWon = false;\n        if (this._board[rowNumber][colNumber] !== 0) {\n            isWon = (isWon) ? isWon : this.areFourConnected(rowNumber, colNumber, 1, 0);\n            isWon = (isWon) ? isWon : this.areFourConnected(rowNumber, colNumber, 1,-1);\n            isWon = (isWon) ? isWon : this.areFourConnected(rowNumber, colNumber, 0, 1);\n            isWon = (isWon) ? isWon : this.areFourConnected(rowNumber, colNumber, 1, 1);\n        }\n        return isWon;\n    }\n\n    /**\n     * Checks if four are in row; returns true, if so.\n     * @param rowNumber\n     * @param colNumber\n     * @param x\n     * @param y\n     * @returns {boolean}\n     */\n    areFourConnected(rowNumber, colNumber, x, y) {\n        var player = this._board[rowNumber][colNumber];\n        var length = 1;\n\n        var counter = 1;\n\n        while (this.isOnBoard(rowNumber + x * counter, colNumber + y * counter)) {\n            //console.log(\"checking at  [\" + (rowNumber + xAxis * counter) + \"][\" + (colNumber + yAxis * counter) + \"]\");\n            if (this._board[rowNumber + x * counter][colNumber + y * counter] === player) {\n                length++;\n                counter++;\n            }\n            else {\n                break;\n            }\n        }\n\n        counter = -1; // reset\n\n        while (this.isOnBoard(rowNumber + x * counter, colNumber + y * counter)) {\n            //console.log(\"checking at  [\" + (rowNumber + xAxis * counter) + \"][\" + (colNumber + yAxis * counter) + \"]\");\n            if (this._board[rowNumber + x * counter][colNumber + y * counter] === player) {\n                length++;\n                counter--;\n            }\n            else {\n                break;\n            }\n        }\n\n        return (length >= this._inRowForWin);\n    }\n\n    /**\n     * Checks if specific row and column exist as per board specs\n     * @param rowNumber\n     * @param colNumber\n     * @returns {boolean}\n     */\n    isOnBoard(rowNumber, colNumber) {\n        {\n            return (0 <= rowNumber && rowNumber < this._rows && 0 <= colNumber && colNumber < this._cols);\n        }\n\n    }\n}"]}