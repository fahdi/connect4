{"version":3,"sources":["ConnectFourUI.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAOM;;;;;;;;;AAQF,aARE,aAQF,GAA6D;YAAjD,oEAAc,kBAAmC;YAA/B,qEAAe,kBAAgB;YAAZ,8DAAQ,kBAAI;;8BAR3D,eAQ2D;;AACzD,aAAK,cAAL,GAAsB,WAAtB,CADyD;AAEzD,aAAK,YAAL,GAAoB,WAApB,CAFyD;AAGzD,aAAK,aAAL,GAAqB,YAArB,CAHyD;AAIzD,aAAK,MAAL,GAAc,KAAd,CAJyD;KAA7D;;iBARE;;;;;;;;;uCA4Ca;AACX,gBAAI,KAAK,cAAL,KAAwB,KAAK,YAAL,EAAmB;AAC3C,qBAAK,cAAL,GAAsB,KAAK,aAAL,CADqB;AAE3C,qBAAK,aAAL,CAAmB,IAAnB,GAF2C;AAG3C,qBAAK,YAAL,CAAkB,IAAlB;;AAH2C,aAA/C,MAKO;AACH,yBAAK,cAAL,GAAsB,KAAK,YAAL,CADnB;AAEH,yBAAK,YAAL,CAAkB,IAAlB,GAFG;AAGH,yBAAK,aAAL,CAAmB,IAAnB;;AAHG,iBALP;AAWA,mBAAO,IAAP,CAZW;;;;;;;;;;;iCAoBN,UAAU,eAAe;AAC9B,gBAAI,SAAS,EAAE,+BAA+B,QAA/B,GAA0C,eAA1C,GAA4D,aAA5D,GAA4E,IAA5E,CAAF,CAAoF,QAApF,EAAT,CAD0B;AAE9B,gBAAI,KAAK,cAAL,KAAwB,KAAK,YAAL,EAAmB;AAC3C,uBAAO,QAAP,CAAgB,UAAhB,EAD2C;aAA/C,MAEO;AACH,uBAAO,QAAP,CAAgB,aAAhB,EADG;aAFP;;;;;;;;;oCAWQ;AACR,iBAAK,MAAL,CAAY,MAAZ,CAAmB,OAAnB,EADQ;AAER,iBAAK,MAAL,CAAY,QAAZ,CAAqB,sBAArB,EAFQ;AAGR,iBAAK,MAAL,CAAY,WAAZ,CAAwB,aAAxB,EAHQ;;;;;;;;;yCASK;AACb,gBAAI,SAAS,EAAT,CADS;AAEb,gBAAI,KAAK,cAAL,KAAwB,KAAK,YAAL,EAAmB;AAC3C,0BAAU,MAAV,CAD2C;aAA/C,MAEO;AACH,0BAAU,MAAV,CADG;aAFP;AAKA,gBAAI,UAAU,YAAY,MAAZ,GAAqB,OAArB,CAPD;;AASb,iBAAK,cAAL,CAAoB,OAApB,EATa;;;;;;;;;;uCAgBF,SAAS;AACpB,cAAE,cAAF,EAAkB,IAAlB,CAAuB,OAAvB,EADoB;;;;;;;;;oCAOZ;AACR,iBAAK,cAAL,CAAoB,yCAApB,EADQ;;;;;;;;;gDAOY;AACpB,iBAAK,cAAL,CAAoB,0DAApB,EADoB;;;;;;;;;uCAOT;AACX,iBAAK,cAAL,CAAoB,EAApB,EADW;;;;4BA5GK;AAChB,mBAAO,KAAK,cAAL,CADS;;0BAIF,QAAQ;AACtB,iBAAK,cAAL,GAAsB,MAAtB,CADsB;;;;4BAIR;AACd,mBAAO,KAAK,YAAL,CADO;;0BAIF,QAAQ;AACpB,iBAAK,YAAL,GAAoB,MAApB,CADoB;;;;4BAIL;AACf,mBAAO,KAAK,aAAL,CADQ;;0BAIF,QAAQ;AACrB,iBAAK,aAAL,GAAqB,MAArB,CADqB;;;;WAnCvB","file":"ConnectFourUI-compiled.js","sourcesContent":["//Connect4 Game UI class\n\n/**\n * Connect4 Class just for the UI,\n * @class\n * @classdesc It handles the UI elements on the screen, players, bord condition and udpates with win notification\n */\nclass ConnectFourUI {\n    /**\n     * Create a ConnectFourUI object which has two players on a board. Its agnostic of number of rows and columns.\n     * @constructor\n     * @param firstPlayer\n     * @param secondPlayer\n     * @param board\n     */\n    constructor(firstPlayer = {}, secondPlayer = {}, board = {}) {\n        this._currentPlayer = firstPlayer;\n        this._firstPlayer = firstPlayer;\n        this._secondPlayer = secondPlayer;\n        this._board = board;\n    }\n\n    get currentPlayer() {\n        return this._currentPlayer;\n    }\n\n    set currentPlayer(player) {\n        this._currentPlayer = player;\n    }\n\n    get firstPlayer() {\n        return this._firstPlayer;\n    }\n\n    set firstPlayer(player) {\n        this._firstPlayer = player;\n    }\n\n    get secondPlayer() {\n        return this._secondPlayer;\n    }\n\n    set secondPlayer(player) {\n        this._secondPlayer = player;\n    }\n\n    /**\n     * Toggles UI elements for players based on whose turn it is\n     *\n     * @returns {boolean}\n     */\n    switchPlayer() {\n        if (this._currentPlayer === this._firstPlayer) {\n            this._currentPlayer = this._secondPlayer;\n            this._secondPlayer.show();\n            this._firstPlayer.hide();\n            //console.log(\"switched to second player in UI\");\n        } else {\n            this._currentPlayer = this._firstPlayer;\n            this._firstPlayer.show();\n            this._secondPlayer.hide();\n            //console.log(\"switched to first player in UI\");\n        }\n        return true;\n    }\n\n    /**\n     * Changes the class of the target slot which turns it red on yellow based on the current player\n     * @param emptyRow\n     * @param currentColumn\n     */\n    dropDisk(emptyRow, currentColumn) {\n        let target = $(\".slot-container[data-row='\" + emptyRow + \"'][data-col='\" + currentColumn + \"']\").children();\n        if (this._currentPlayer === this._firstPlayer) {\n            target.addClass(\"slot-red\");\n        } else {\n            target.addClass(\"slot-yellow\");\n        }\n\n    }\n\n    /**\n     * Gives the board kinda disabled / greyed out look when called\n     */\n    disableUI() {\n        this._board.unbind('click');\n        this._board.addClass('connectfour-disabled');\n        this._board.removeClass('connectfour');\n    }\n\n    /**\n     * Draws the text message when a user wins\n     */\n    drawWonMessage() {\n        var winner = '';\n        if (this._currentPlayer === this._firstPlayer) {\n            winner += 'one ';\n        } else {\n            winner += 'two ';\n        }\n        var message = \"Player \" + winner + \"wins!\";\n\n        this.displayMessage(message);\n    }\n\n    /**\n     * This function is used for displaying a message in the div above connect4 board\n     * @param message\n     */\n    displayMessage(message) {\n        $('.communicate').text(message);\n    }\n\n    /**\n     * Is called in start when the starting instruction is displayed above board\n     */\n    showIntro() {\n        this.displayMessage('Click on any slot in a column to start.');\n    }\n\n    /**\n     * This is called to display a message when the whole column is filled with disks\n     */\n    showColumnFillMessage() {\n        this.displayMessage('The column is already filled. Please try another column.');\n    }\n\n    /**\n     * Clear out the message above the board in UI\n     */\n    cleanMessage() {\n        this.displayMessage('');\n    }\n}\n\n"]}